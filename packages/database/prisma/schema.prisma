// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  characters Character[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt @default(now())
}

model Game {
  id          String      @id @default(uuid())
  characters  Character[]
  tiles       Tile[]  
  fights      Fight[]
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
}

model Character {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  game        Game?         @relation(fields: [gameId], references: [id])
  gameId      String?
  fights      Fight[]
  stats       Stats?
  
  name        String
  status      String        @default("offline")
  x           Int           @default(0)
  y           Int           @default(0)
  nextAction  String        @default("move")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @default(now())
  @@unique([userId, gameId])
}

model Tile {
  id          Int       @id @default(autoincrement())
  game        Game?     @relation(fields: [gameId], references: [id])
  gameId      String?
  enemy       Enemy?    @relation(fields: [enemyId], references: [id])
  enemyId     Int?      @unique
  fights      Fight[]
  
  x           Int       @default(0)
  y           Int       @default(0)
  type        String    @default("start")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
  @@unique([gameId, x, y])
}

model Fight {
  id            Int         @id @default(autoincrement())
  game          Game?       @relation(fields: [gameId], references: [id])
  gameId        String?
  enemy         Enemy?      @relation(fields: [enemyId], references: [id])
  enemyId       Int?        
  character     Character?  @relation(fields: [characterId], references: [id])
  characterId   Int?        
  tile          Tile?       @relation(fields: [tileId], references: [id])
  tileId        Int?    
  attack        Json? 
  diff          Json? 
  history       Json        @default("[]")
  
  isOver        Boolean     @default(false)
  isPending     Boolean     @default(false)
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Enemy {
  id            Int         @id @default(autoincrement())
  fights        Fight[]
  stats         Stats?
  tile          Tile?
  name          String    
  isDefeated    Boolean?    @default(false)
  history       Json        @default("[]")
  diff          Json? 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Stats {
  id            Int         @id @default(autoincrement())
  character     Character?  @relation(fields: [characterId], references: [id])
  characterId   Int?        @unique
  enemy         Enemy?      @relation(fields: [enemyId], references: [id])
  enemyId       Int?        @unique
  level         Int         @default(1)
  ep            Int         @default(0)
  strength      Int
  wisdom        Int
  stamina       Int
  hp            Int           
  hpMax         Int           
  mana          Int           
  manaMax       Int           
  endurance     Int        
  enduranceMax  Int  
  stepsDone     Int         @default(0)
  stepsMax      Int         @default(4)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}